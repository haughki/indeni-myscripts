#!/usr/bin/env bash

# Run from test directory where all of the test case directories for a
# script are located. This just uses existing input_0_0 files and tries to update
# the output.json for every existing test case.

# Usage:
# update-all-baselines
# /indeni-knowledge/parsers/test/crossvendor/unix/top-b $ update-all-baselines

# gives: /mnt/d/projects/indeni/indeni-knowledge/parsers/src/checkpoint/firewall/log-server-connection-vsx
script="$(pwd | sed -r 's/\/parsers\/test/\/parsers\/src/')"

# gives: log-server-connection-vsx
bname="$(basename ${script})"

if [[ $1 == "py" ]]; then
    # Replace "-" with "_"
    # Inline search/replace: ${parameter/pattern/string} -- https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Shell-Parameter-Expansion
    # gives: /mnt/d/projects/indeni/indeni-knowledge/parsers/src/checkpoint/firewall/log-server-connection-vsx/log_server_connection_vsx.ind.yaml
    script="${script}/${bname//-/_}.ind.yaml"
else
    # gives: /mnt/d/projects/indeni/indeni-knowledge/parsers/src/checkpoint/firewall/log-server-connection-vsx/log-server-connection-vsx.ind.yaml
    script="${script}/${bname}.ind.yaml"
fi


for test_name in */ ; do
    input_file="${PWD}/${test_name}input_0_0"
    test_name="${test_name%/}"
    echo "script: ${script}"
    echo "test name: ${test_name}"
    echo "input file: ${input_file}"
    command-runner test create "$script" "$test_name" "$input_file"
done
